from aiogram import types, Dispatcher

from aiogram.dispatcher import FSMContext

from keyboards import mainKeyboardAdmin, mainKeyboard, canckb
from database import userExist, sql_read_admins, sql_read_consultation, sql_read_appeal, sql_read_admins_for_admin, \
    sql_delete_column_query, sql_add_admins
from states.admin import *


async def get_all_consultation(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            string = await sql_read_consultation()
            await message.answer(string, parse_mode='html', reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer("–í—ã –Ω–µ <b>–∞–¥–º–∏–Ω</b> !",
                                 reply_markup=await mainKeyboard(message.from_user.id),
                                 parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def get_all_appeal(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            string = await sql_read_appeal()
            await message.answer(string, parse_mode='html', reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer("–í—ã –Ω–µ <b>–∞–¥–º–∏–Ω</b> !",
                                 reply_markup=await mainKeyboard(message.from_user.id),
                                 parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def get_user_count_cmd(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            string = await sql_read_admins_for_admin()
            await message.answer(string, parse_mode='html', reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer("–í—ã –Ω–µ <b>–∞–¥–º–∏–Ω</b> !",
                                 reply_markup=await mainKeyboard(message.from_user.id),
                                 parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def delete_all_column_query(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        if message.from_user.id == 803817300:
            await sql_delete_column_query()
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ <b>—É—Å–ø–µ—à–Ω–æ</b> –æ—á–∏—â–µ–Ω—ã !", parse_mode='html',
                                 reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer("–í—ã –Ω–µ <b>–∞–¥–º–∏–Ω</b> !",
                                 reply_markup=await mainKeyboard(message.from_user.id),
                                 parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ <b>–æ—Ç–º–µ–Ω–µ–Ω–æ</b>',
                        parse_mode='html',
                        reply_markup=await mainKeyboardAdmin(message.from_user.id))


async def add_admin_id(message: types.Message):
    try:
        if message.from_user.id == 803817300:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID</b> –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞",
                                parse_mode='html',
                                reply_markup=canckb)
            await AddAdminState.admin_id.set()
        else:
            await message.answer("–í—ã –Ω–µ <b>–∞–¥–º–∏–Ω</b> !",
                                 reply_markup=await mainKeyboard(message.from_user.id),
                                 parse_mode='html')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def load_admin_id(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['admin_id'] = int(message.text)

        await sql_add_admins(data['admin_id'])
        await message.reply(text="‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await state.finish()
    except ValueError as e:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ <b>ID</b>")
        await state.finish()


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(get_all_consultation, text="üíª –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
    dp.register_message_handler(get_all_appeal, text="üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    dp.register_message_handler(get_user_count_cmd, text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    dp.register_message_handler(delete_all_column_query, text="üöΩ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    dp.register_message_handler(cmd_cancel, text='‚ùå –û—Ç–º–µ–Ω–∞', state='*')
    dp.register_message_handler(add_admin_id, text='üñã –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
    dp.register_message_handler(load_admin_id, state=AddAdminState.admin_id)

