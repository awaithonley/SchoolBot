from aiogram import types, Dispatcher
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from aiogram.dispatcher import FSMContext
from keyboards import choice_lang, mainKeyboard, changeKeyboardFunc, causeKeyboard, setAppealKeyboard, skipKeyboard, \
    dayOfTheWeekKeyboard, timeConsultationKeyboard, mainKeyboardAdmin
from database import createUserColumn, userExist, getUserLang, getName, getUserPerson, getUserClass, setNewLang, \
    createUserColumnAppeal, createUserColumnConsultation, sql_read_admins
from states.client import *


async def start_cmd(message: types.Message, state: FSMContext):
    user = await userExist(message.from_user.id)
    if user:
        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            userLang = await getUserLang(message.from_user.id)
            name = await getName(message.from_user.id)
            if userLang == "–†—É—Å—Å–∫–∏–π":
                await message.answer(f"üôáüèª‚Äç‚ôÇÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                     parse_mode='html',
                                     reply_markup=await mainKeyboardAdmin(message.from_user.id))
                await state.finish()
            elif userLang == "“ö–∞–∑–∞“õ—à–∞":
                await message.answer(f"üôáüèª‚Äç‚ôÇÔ∏è –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                     parse_mode='html',
                                     reply_markup=await mainKeyboardAdmin(message.from_user.id))
                await state.finish()
        else:
            userLang = await getUserLang(message.from_user.id)
            name = await getName(message.from_user.id)
            if userLang == "–†—É—Å—Å–∫–∏–π":
                await message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                     parse_mode='html',
                                     reply_markup=await mainKeyboard(message.from_user.id))
                await state.finish()
            elif userLang == "“ö–∞–∑–∞“õ—à–∞":
                await message.answer(f"üëã –°”ô–ª–µ–º, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                     parse_mode='html',
                                     reply_markup=await mainKeyboard(message.from_user.id))
                await state.finish()

    else:
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑</b>",
                             parse_mode='html', reply_markup=choice_lang)
        await StartFSM.lang.set()


async def set_lang(callback: types.CallbackQuery, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['lang'] = callback.data

            ParentButton = KeyboardButton(callback_data="Parent",
                                          text="üë§ –†–æ–¥–∏—Ç–µ–ª—å" if data['lang'] == "–†—É—Å—Å–∫–∏–π" else "üë§ –ê—Ç–∞-–∞–Ω–∞")

            kidButton = KeyboardButton(callback_data="Kid",
                                       text="üíº –®–∫–æ–ª—å–Ω–∏–∫" if data['lang'] == "–†—É—Å—Å–∫–∏–π" else "üíº –ú–µ–∫—Ç–µ–ø –æ“õ—É—à—ã—Å—ã")

            choice_person = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)

            choice_person.add(ParentButton)
            choice_person.add(kidButton)

            if data['lang'] == "–†—É—Å—Å–∫–∏–π":
                await callback.message.reply("–ö—Ç–æ –≤—ã ?", reply_markup=choice_person)
            elif data['lang'] == "“ö–∞–∑–∞“õ—à–∞":
                await callback.message.reply("–°—ñ–∑ –∫—ñ–º—Å—ñ–∑ ?", reply_markup=choice_person)
        await callback.answer()

        await StartFSM.next()
    except Exception as e:
        await callback.message.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def set_person(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['person'] = message.text

            if data['lang'] == "–†—É—Å—Å–∫–∏–π":
                await message.reply("üñã –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b>:", parse_mode='html',
                                    reply_markup=types.ReplyKeyboardRemove())
            elif data['lang'] == "“ö–∞–∑–∞“õ—à–∞":
                await message.reply("üñã<b>–ê—Ç—ã“£—ã–∑–¥—ã</b> –∂”ô–Ω–µ <b>—Ñ–∞–º–∏–ª–∏—è“£—ã–∑–¥—ã</b> –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", parse_mode='html',
                                    reply_markup=types.ReplyKeyboardRemove())

        await StartFSM.next()
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def set_name(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['name'] = message.text

            if data['lang'] == "–†—É—Å—Å–∫–∏–π":
                await message.reply("üñã –í–≤–µ–¥–∏—Ç–µ –í–∞—à <b>–∫–ª–∞—Å—Å</b> –∏ <b>–ª–∏—Ç–µ—Ä</b>:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 1–ê, 2–ë)", parse_mode='html')
            elif data['lang'] == "“ö–∞–∑–∞“õ—à–∞":
                await message.reply("üñã <b>–°—ã–Ω—ã–±—ã</b> –º–µ–Ω <b>”ô—Ä—ñ–ø—Ç—ñ</b> –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n(–ú—ã—Å–∞–ª—ã: 1A, 2–ë)", parse_mode='html')

        await StartFSM.next()

    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def set_Class(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['Class'] = message.text

            await createUserColumn(message.from_user.id, message.from_user.username, data['name'], data['lang'],
                                   data['person'], data['Class'])

            if data['lang'] == "–†—É—Å—Å–∫–∏–π":
                admin_id = sql_read_admins()
                if message.from_user.id in admin_id:
                    await message.reply(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{data['name']}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                        parse_mode='html',
                                        reply_markup=await mainKeyboardAdmin(message.from_user.id))
                else:
                    await message.reply(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{data['name']}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                        parse_mode='html',
                                        reply_markup=await mainKeyboard(message.from_user.id))
            elif data['lang'] == "“ö–∞–∑–∞“õ—à–∞":
                admin_id = sql_read_admins()
                if message.from_user.id in admin_id:
                    await message.reply(f"üëã –°”ô–ª–µ–º, <b>{data['name']}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                        parse_mode='html',
                                        reply_markup=await mainKeyboardAdmin(message.from_user.id))

                else:
                    await message.reply(f"üëã –°”ô–ª–µ–º, <b>{data['name']}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                        parse_mode='html',
                                        reply_markup=await mainKeyboard(message.from_user.id))

        await state.finish()

    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def settings_cmdRu(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        person = await getUserPerson(message.from_user.id)
        userLang = await getUserLang(message.from_user.id)
        name = await getName(message.from_user.id)
        userClass = await getUserClass(message.from_user.id)
        await message.answer(f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                             f"<b>{person}</b>\n"
                             f"–ò–º—è: <b>{name}</b>\n"
                             f"–ö–ª–∞—Å—Å: <b>{userClass}\n</b>"
                             f"–Ø–∑—ã–∫: <b>{userLang}</b>",
                             reply_markup=await changeKeyboardFunc(message.from_user.id),
                             parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def settings_cmdKz(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        person = await getUserPerson(message.from_user.id)
        userLang = await getUserLang(message.from_user.id)
        name = await getName(message.from_user.id)
        userClass = await getUserClass(message.from_user.id)
        await message.answer(f"<b>‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä</b>\n\n"
                             f"<b>{person}</b>\n"
                             f"–ê—Ç—ã: <b>{name}</b>\n"
                             f"–°—ã–Ω—ã–ø: <b>{userClass}</b>\n"
                             f"–¢—ñ–ª: <b>{userLang}</b>",
                             reply_markup=await changeKeyboardFunc(message.from_user.id), parse_mode='html')
    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def changeLang(callback: types.CallbackQuery):
    await callback.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑</b>",
                                  reply_markup=choice_lang, parse_mode='html')
    await callback.answer()
    await ChangeLangFSM.newLang.set()


async def newLangCmd(callback: types.CallbackQuery, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['newLang'] = callback.data

            userLang = data['newLang']
            name = await getName(callback.from_user.id)

            if userLang == "–†—É—Å—Å–∫–∏–π":
                admin_id = sql_read_admins()
                if callback.message.from_user.id in admin_id:
                    await setNewLang(callback.from_user.id, userLang)
                    await callback.message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                                  parse_mode='html',
                                                  reply_markup=await mainKeyboardAdmin(callback.from_user.id))
                else:
                    await setNewLang(callback.from_user.id, userLang)
                    await callback.message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>",
                                                  parse_mode='html',
                                                  reply_markup=await mainKeyboard(callback.from_user.id))

            elif userLang == "“ö–∞–∑–∞“õ—à–∞":
                await setNewLang(callback.from_user.id, userLang)
                admin_id = sql_read_admins()
                if callback.message.from_user.id in admin_id:
                    await callback.message.answer(f"üëã –°”ô–ª–µ–º, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                                  parse_mode='html',
                                                  reply_markup=await mainKeyboardAdmin(callback.from_user.id))
                else:
                    await callback.message.answer(f"üëã –°”ô–ª–µ–º, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                                  parse_mode='html',
                                                  reply_markup=await mainKeyboard(callback.from_user.id))

            await callback.answer()

            await state.finish()
    except Exception as e:
        await callback.message.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def appeal_cmd(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        userLang = await getUserLang(message.from_user.id)
        await message.answer("üë§ –ö –∫–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è</b> ?" if userLang == "–†—É—Å—Å–∫–∏–π"
                             else "üë§–ö—ñ–º–≥–µ <b>—Ö–∞–±–∞—Ä–ª–∞—Å“õ—ã“£—ã–∑</b> –∫–µ–ª–µ–¥—ñ?", parse_mode='html',
                             reply_markup=await setAppealKeyboard(message.from_user.id))

        await AppealFSM.pscZdvr.set()

    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def pscZdvr_cmd(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pscZdvr'] = message.text

        if data['pscZdvr'] == "üë©‚Äç‚öï –ü—Å–∏—Ö–æ–ª–æ–≥" or data['pscZdvr'] == "üë®‚Äçüíº –ó–î–í–†" or data['pscZdvr'] == "üë®‚Äçüíº –î–¢–ñ–ñ–û":

            userLang = await getUserLang(message.from_user.id)

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b> –æ–±—Ä–∞—â–µ–Ω–∏—è" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üìÑ –°“±—Ä–∞—É—ã“£—ã–∑–¥—ã“£ <b>—Å–µ–±–µ–±—ñ–Ω</b> —Ç–∞“£–¥–∞“£—ã–∑",
                                 reply_markup=await causeKeyboard(message.from_user.id),
                                 parse_mode='html')
            await AppealFSM.next()

        elif data['pscZdvr'] == "‚óÄÔ∏è –ù–∞–∑–∞–¥" or data['pscZdvr'] == "‚óÄÔ∏è –ê—Ä—Ç“õ–∞":
            userLang = await getUserLang(message.from_user.id)
            name = await getName(message.from_user.id)

            await message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else f"üëã –°”ô–ª–µ–º, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                 parse_mode='html',
                                 reply_markup=await mainKeyboard(message.from_user.id))

            await state.finish()
        else:
            userLang = await getUserLang(message.from_user.id)

            await state.finish()
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "–°—ñ–∑ “õ–∞—Ç–µ –ø”ô—Ä–º–µ–Ω–¥—ñ –µ–Ω–≥—ñ–∑–¥—ñ“£—ñ–∑")


async def causeAppeal_cmd(message: types.Message, state: FSMContext):
    causeRuArray = ["–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ë—É–ª–ª–∏–Ω–≥", "–ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è —É—á–∏—Ç—å—Å—è", "–ù–µ—Ç –¥—Ä—É–∑–µ–π",
                    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"]

    causeKzArray = ["–ú—ñ–Ω–µ–∑-“õ“±–ª—ã“õ—Ç—ã“£ –±“±–∑—ã–ª—É—ã", "“ö–æ—Ä“õ—ã—Ç—É", "–û“õ—É“ì–∞ –¥–µ–≥–µ–Ω “õ“±—à—Ç–∞—Ä–ª—ã“õ—Ç—ã“£ –±–æ–ª–º–∞—É—ã", "–î–æ—Å—Ç–∞—Ä—ã –∂–æ“õ",
                    "–°—ã–Ω—ã–ø—Ç–∞—Å—Ç–∞—Ä–º–µ–Ω –∂–∞–Ω–∂–∞–ª", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è–Ω—ã“£ —Ç”©–º–µ–Ω–¥–µ—É—ñ"]

    async with state.proxy() as data:
        data['cause'] = message.text

        causeAppeal = data['cause']

        userLang = await getUserLang(message.from_user.id)

        if causeAppeal in causeKzArray or causeAppeal in causeRuArray:

            await message.answer("üìù –û–ø–∏—à–∏—Ç–µ <b>–í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É</b>:" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üìù <b>–ú”ô—Å–µ–ª–µ“£—ñ–∑–¥—ñ</b> —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑:", parse_mode='html',
                                 reply_markup=await skipKeyboard(message.from_user.id))

            await AppealFSM.next()
        elif causeAppeal == "‚óÄÔ∏è Ha–∑a–¥" or causeAppeal == "‚óÄÔ∏è Ap—Ç“õa":

            await message.answer("üë§ –ö –∫–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è</b> ?" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üë§–ö—ñ–º–≥–µ <b>—Ö–∞–±–∞—Ä–ª–∞—Å“õ—ã“£—ã–∑</b> –∫–µ–ª–µ–¥—ñ?", parse_mode='html',
                                 reply_markup=await setAppealKeyboard(message.from_user.id))

            await AppealFSM.previous()


async def descriptionOfProblem(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['descriptionOfProblem'] = message.text

        userLang = await getUserLang(message.from_user.id)

        await message.answer("üìû –û—Å—Ç–∞–≤—å—Ç–µ <b>—Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>, —á—Ç–æ–±—ã –º—ã —Å –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å: \n"
                             "<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞)</i>"
                             if userLang == "–†—É—Å—Å–∫–∏–π"
                             else "üìû –ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å–∞ –∞–ª—É—ã–º—ã–∑ “Ø—à—ñ–Ω <b>–∫–æ–Ω—Ç–∞–∫—Ç—ñ–ª–µ—Ä—ñ“£—ñ–∑–¥—ñ</b> “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑: \n"
                                  "<i>(–ú—ã—Å–∞–ª—ã: –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ, –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞)</i>", parse_mode='html')

        await AppealFSM.next()


async def contactAppeal_cmd(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Contact'] = message.text

        userPerson = await getUserPerson(message.from_user.id)
        name = await getName(message.from_user.id)
        Class = await getUserClass(message.from_user.id)
        userLang = await getUserLang(message.from_user.id)

        await createUserColumnAppeal(message.from_user.id, userPerson, message.from_user.username, name, Class,
                                     data['pscZdvr'], data['cause'], data['descriptionOfProblem'], data['Contact'])

        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–µ <b>–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>!" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "‚úÖ –†–∞—Ö–º–µ—Ç, —Å—ñ–∑–¥—ñ“£ <b>–∞–ø–µ–ª–ª—è—Ü–∏—è“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã</b>!", parse_mode='html',
                                 reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–µ <b>–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>!" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "‚úÖ –†–∞—Ö–º–µ—Ç, —Å—ñ–∑–¥—ñ“£ <b>–∞–ø–µ–ª–ª—è—Ü–∏—è“£—ã–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã</b>!", parse_mode='html',
                                 reply_markup=await mainKeyboard(message.from_user.id))

        await state.finish()


async def consultation_cmd(message: types.Message):
    user = await userExist(message.from_user.id)
    if user:
        userLang = await getUserLang(message.from_user.id)
        await message.answer("üë§ –ö –∫–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è</b> ?" if userLang == "–†—É—Å—Å–∫–∏–π"
                             else "üë§–ö—ñ–º–≥–µ <b>—Ö–∞–±–∞—Ä–ª–∞—Å“õ—ã“£—ã–∑</b> –∫–µ–ª–µ–¥—ñ?", parse_mode='html',
                             reply_markup=await setAppealKeyboard(message.from_user.id))

        await ConsultationFSM.pscZdvr.set()

    else:
        await message.answer("<b>üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\nüö´ –°—ñ–∑ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ–∑\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: "
                             "/start\n–¢—ñ—Ä–∫–µ–ª—É: /start</b>", parse_mode='html')


async def pscZdvrConsultation_cmd(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pscZdvr'] = message.text

        if data['pscZdvr'] == "üë©‚Äç‚öï –ü—Å–∏—Ö–æ–ª–æ–≥" or data['pscZdvr'] == "üë®‚Äçüíº –ó–î–í–†" or data['pscZdvr'] == "üë®‚Äçüíº –î–¢–ñ–ñ–û":

            userLang = await getUserLang(message.from_user.id)

            await message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üïê <b>–ê–ø—Ç–∞ –∫“Ø–Ω—ñ–Ω</b> —Ç–∞“£–¥–∞“£—ã–∑",
                                 reply_markup=await dayOfTheWeekKeyboard(message.from_user.id),
                                 parse_mode='html')
            await ConsultationFSM.next()

        elif data['pscZdvr'] == "‚óÄÔ∏è –ù–∞–∑–∞–¥" or data['pscZdvr'] == "‚óÄÔ∏è –ê—Ä—Ç“õ–∞":
            userLang = await getUserLang(message.from_user.id)
            name = await getName(message.from_user.id)

            await message.answer(f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{name}</b>!\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–µ</b>" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else f"üëã –°”ô–ª–µ–º, <b>{name}</b>!\nüîπ ”ò—Ä–µ–∫–µ—Ç—Ç—ñ <b>—Ç–∞“£–¥–∞“£—ã–∑</b>",
                                 parse_mode='html',
                                 reply_markup=await mainKeyboard(message.from_user.id))

            await state.finish()
        else:
            userLang = await getUserLang(message.from_user.id)

            await state.finish()
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "–°—ñ–∑ “õ–∞—Ç–µ –ø”ô—Ä–º–µ–Ω–¥—ñ –µ–Ω–≥—ñ–∑–¥—ñ“£—ñ–∑")


async def dayOfTheWeek_cmd(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['dayOfTheWeek'] = message.text

        dayOfTheWeek = data['dayOfTheWeek']

        time = ["9:00",
                "9:30",
                "10:00",
                "10:30",
                "11:00",
                "11:30",
                "12:00",
                "12:30",
                "14:30",
                "15:00",
                "15:30",
                "16:00",
                "16:30",
                "17:00",
                "17:30"]

        dayOfTheWeekArray = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                             "–í—Ç–æ—Ä–Ω–∏–∫",
                             "–°—Ä–µ–¥–∞",
                             "–ß–µ—Ç–≤–µ—Ä–≥",
                             "–ü—è—Ç–Ω–∏—Ü–∞",
                             "–î“Ø–π—Å–µ–Ω–±—ñ",
                             "–°–µ–π—Å–µ–Ω–±—ñ",
                             "–°”ô—Ä—Å–µ–Ω–±—ñ",
                             "–ë–µ–π—Å–µ–Ω–±—ñ",
                             "–ñ“±–º–∞"]

        if dayOfTheWeek in dayOfTheWeekArray:

            userLang = await getUserLang(message.from_user.id)

            await message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å <b>–≤—Ä–µ–º—è</b>" if userLang == "–†—É—Å—Å–∫–∏–π" else
                                 "üïê –´“£“ì–∞–π–ª—ã —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑", parse_mode='html',
                                 reply_markup=await timeConsultationKeyboard(message.from_user.id))
            await ConsultationFSM.next()
        elif dayOfTheWeek == "‚óÄÔ∏è –ù–∞–∑–∞–¥" or dayOfTheWeek == "‚óÄÔ∏è –ê—Ä—Ç“õ–∞":
            userLang = await getUserLang(message.from_user.id)

            await message.answer("üë§ –ö –∫–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è</b> ?" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üë§–ö—ñ–º–≥–µ <b>—Ö–∞–±–∞—Ä–ª–∞—Å“õ—ã“£—ã–∑</b> –∫–µ–ª–µ–¥—ñ?", parse_mode='html',
                                 reply_markup=await setAppealKeyboard(message.from_user.id))

            await ConsultationFSM.previous()


async def timeForConsultation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['timeUser'] = message.text

        timeUser = data['timeUser']

        userLang = await getUserLang(message.from_user.id)

        if timeUser == "‚óÄÔ∏è –ù–∞–∑–∞–¥" or timeUser == "‚óÄÔ∏è –ê—Ä—Ç“õ–∞":
            userLang = await getUserLang(message.from_user.id)

            await message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>" if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üïê <b>–ê–ø—Ç–∞ –∫“Ø–Ω—ñ–Ω</b> —Ç–∞“£–¥–∞“£—ã–∑",
                                 reply_markup=await dayOfTheWeekKeyboard(message.from_user.id),
                                 parse_mode='html')

            await ConsultationFSM.previous()
        else:
            await message.answer("üìû –û—Å—Ç–∞–≤—å—Ç–µ <b>—Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>, —á—Ç–æ–±—ã –º—ã —Å –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å: \n"
                                 "<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞)</i>"
                                 if userLang == "–†—É—Å—Å–∫–∏–π"
                                 else "üìû –ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å–∞ –∞–ª—É—ã–º—ã–∑ “Ø—à—ñ–Ω <b>–∫–æ–Ω—Ç–∞–∫—Ç—ñ–ª–µ—Ä—ñ“£—ñ–∑–¥—ñ</b> “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑: \n"
                                      "<i>(–ú—ã—Å–∞–ª—ã: –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ, –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞)</i>", parse_mode='html',
                                 reply_markup=await skipKeyboard(message.from_user.id))

            await ConsultationFSM.next()


async def contactConsultation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Contact'] = message.text

        userLang = await getUserLang(message.from_user.id)

        person = await getUserPerson(message.from_user.id)
        name = await getName(message.from_user.id)
        Class = await getUserClass(message.from_user.id)

        await createUserColumnConsultation(message.from_user.id, person, message.from_user.username, name, Class,
                                           data['pscZdvr'], data['dayOfTheWeek'], data['Contact'])

        admin_id = sql_read_admins()
        if message.from_user.id in admin_id:
            await message.answer(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ <b>{data['dayOfTheWeek']}</b>, <b>{data['timeUser']}</b>!"
                                 if userLang == "–†—É—Å—Å–∫–∏–π" else f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è <b>{data['dayOfTheWeek']}, "
                                 f"{data['timeUser']}</b> –∫“Ø–Ω–¥–µ—Ä—ñ–Ω–µ —Å”ô—Ç—Ç—ñ –∂–æ—Å–ø–∞—Ä–ª–∞–Ω“ì–∞–Ω!",
                                 parse_mode='html', reply_markup=await mainKeyboardAdmin(message.from_user.id))
        else:
            await message.answer(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ <b>{data['dayOfTheWeek']}</b>, <b>{data['timeUser']}</b>!"
                                 if userLang == "–†—É—Å—Å–∫–∏–π" else f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è <b>{data['dayOfTheWeek']}, "
                                 f"{data['timeUser']}</b> –∫“Ø–Ω–¥–µ—Ä—ñ–Ω–µ —Å”ô—Ç—Ç—ñ –∂–æ—Å–ø–∞—Ä–ª–∞–Ω“ì–∞–Ω!",
                                 parse_mode='html', reply_markup=await mainKeyboard(message.from_user.id))

        await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start'], state='*')
    dp.register_callback_query_handler(set_lang, state=StartFSM.lang)
    dp.register_message_handler(set_person, state=StartFSM.person)
    dp.register_message_handler(set_name, state=StartFSM.name)
    dp.register_message_handler(set_Class, state=StartFSM.Class)
    dp.register_message_handler(settings_cmdRu, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.register_message_handler(settings_cmdKz, text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä")
    dp.register_callback_query_handler(changeLang, text=['changeLang'])
    dp.register_callback_query_handler(newLangCmd, state=ChangeLangFSM.newLang)
    dp.register_message_handler(appeal_cmd, text="üìß –û–±—Ä–∞—â–µ–Ω–∏–µ")
    dp.register_message_handler(pscZdvr_cmd, state=AppealFSM.pscZdvr)
    dp.register_message_handler(causeAppeal_cmd, state=AppealFSM.cause)
    dp.register_message_handler(descriptionOfProblem, state=AppealFSM.descriptionOfProblem)
    dp.register_message_handler(contactAppeal_cmd, state=AppealFSM.Contact)
    dp.register_message_handler(consultation_cmd, text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
    dp.register_message_handler(pscZdvrConsultation_cmd, state=ConsultationFSM.pscZdvr)
    dp.register_message_handler(dayOfTheWeek_cmd, state=ConsultationFSM.dayOfTheWeek)
    dp.register_message_handler(timeForConsultation, state=ConsultationFSM.timeUser)
    dp.register_message_handler(contactConsultation, state=ConsultationFSM.Contact)

